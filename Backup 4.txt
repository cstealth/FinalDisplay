----------------------------------------------------------------------------------
-- Company: LeTourneau University
-- Engineer: 
-- 
-- Create Date:    19:46:40 04/11/2021 
-- Design Name: 
-- Module Name:    FinalDisplay - Behavioral 
-- Project Name: Digital Electronics Clock Display
-- Target Devices: 
-- Tool versions: 
-- Description: 
--
-- Dependencies: 
--
-- Revision: 
-- Revision 0.01 - File Created
-- Additional Comments: 
--
----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx primitives in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity FinalDisplay is
    Port ( --SEC_0 : in  STD_LOGIC_VECTOR(3 downto 0);	
				-- clock signal
				CLK : in STD_LOGIC;
				
				-- 4 digits on board				
				AN1 : out  STD_LOGIC;
				AN2 : out  STD_LOGIC;
				AN3 : out  STD_LOGIC;
				AN4 : out  STD_LOGIC;
	 
				-- 7 outputs for 7 segment display
           C_A : out  STD_LOGIC;
           C_B : out  STD_LOGIC;
           C_C : out  STD_LOGIC;
           C_D : out  STD_LOGIC;
           C_E : out  STD_LOGIC;
           C_F : out  STD_LOGIC;
           C_G : out  STD_LOGIC);
end FinalDisplay;


architecture Behavioral of FinalDisplay is
	-- clock counter
	signal CLK_COUNTER : STD_LOGIC_VECTOR (23 downto 0);
	
	-- modified clock, clock divided by 2^15, 244 Hz
	signal CLOCK : STD_LOGIC;
	
	-- which AN port to trigger, which digit to display
	signal AN_COUNT: natural range 0 to 3 := 0;
	
	-- AN ports
	signal AN : std_logic_vector(3 downto 0);	
	
	-- BCD of digits
	--signal HR2
	--signal HR1
	signal MIN2 : STD_LOGIC_VECTOR(3 downto 0) := "0100";
	signal MIN1 : STD_LOGIC_VECTOR(3 downto 0) := "0011";
	signal SEC2 : STD_LOGIC_VECTOR(3 downto 0) := "0010";
	signal SEC1 : STD_LOGIC_VECTOR(3 downto 0) := "0001";
	
	-- BCD value of number to display
	signal NUMBER : STD_LOGIC_VECTOR(3 downto 0) := "0100";
	
	-- information for 7 segment display
	signal DISPLAY : std_logic_vector(6 downto 0);

begin
	
	-- do stuff every 1 ms, dividing clock signal
	Clock_Divider : process (CLK)
		begin
			if (rising_edge(CLK)) then
				CLK_COUNTER <= CLK_COUNTER + '1';
			end if;
	end process;
	
	-- the 15th digit divides the frequency of the 8 MHz clock by 2^15 so that it has a frequency of 244 Hz, so the period as 4 ms
	Clock <= CLK_COUNTER(15);
	
	-- use AN_COUNT to modify which AN port is on
	Change_Count : process (Clock)
	begin
		-- increment AN_COUNT from 1 to 3
		AN_COUNT <= AN_COUNT + 1;
		if (AN_COUNT > 3) then
			AN_COUNT <= 0;
		end if;
	end process;
	
	Change_AN_Output : process (Clock)
	begin
		-- set digit to display based on AN_COUNT
		case AN_COUNT is
			when 0 => AN <= "0111";
			when 1 => AN <= "1011";
			when 2 => AN <= "1101";
			when 3 => AN <= "1110";
		end case;
		
		-- turn AN ports on or off accordingly
		AN1 <= AN(3);
		AN2 <= AN(2);
		AN3 <= AN(1);
		AN4 <= AN(0);
	end process;
	
	-- change value of number to be displayed based on AN_COUNT
	Change_Counter : process (Clock)
	begin
		case AN_COUNT is
			when 0 => NUMBER <= MIN2;
			when 1 => NUMBER <= MIN1;
			when 2 => NUMBER <= SEC2;
			when 3 => NUMBER <= SEC1;
		end case;
	end process;
	
	-- display numbers
	Display_LED : process(Clock)
	begin
		case NUMBER is
				when "0000" =>
					DISPLAY <= "0000001"; -- 0
				when "0001" =>
					DISPLAY <= "1001111"; -- 1
				when "0010" =>
					DISPLAY <= "0010010"; -- 2
				when "0011" =>
					DISPLAY <= "0000110"; -- 3
				when "0100" =>
					DISPLAY <= "1001100"; -- 4
				when "0101" =>
					DISPLAY <= "0100100"; -- 5
				when "0110" =>
					DISPLAY <= "0100000"; -- 6
				when "0111" =>
					DISPLAY <= "0001111"; -- 7
				when "1000" =>
					DISPLAY <= "0000000"; -- 8
				when "1001" =>
					DISPLAY <= "0000100"; -- 9
				when others =>
					DISPLAY <= "1111111"; -- blank when not a digit
		end case;
		
		-- send information to board
		C_A <= DISPLAY(6);
		C_B <= DISPLAY(5);
		C_C <= DISPLAY(4);
		C_D <= DISPLAY(3);
		C_E <= DISPLAY(2);
		C_F <= DISPLAY(1);
		C_G <= DISPLAY(0);
	end process;
	
end Behavioral;